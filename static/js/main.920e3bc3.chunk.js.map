{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MyPokemon","this","load","props","pokeNum","_this","url","console","log","fetch","then","results","json","data","string","setState","name","charAt","toUpperCase","slice","img","nextProps","state","react_default","a","createElement","src","Component","MyInput","_this2","value","onChange","evt","update","App","_this3","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","e","num","target","replace","className","App_MyPokemon","App_MyInput","updatePokeNum","bind","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+MCWlCC,8LAEFC,KAAKC,KAAKD,KAAKE,MAAMC,sCAGlBA,GAAS,IAAAC,EAAAJ,KACRK,EAAM,qCAAuCF,EAAU,IAC3DG,QAAQC,IAAIF,GACZG,MAAMH,GAAKI,KACX,SAAAC,GAAY,OAAOA,EAAQC,SAAUF,KAAK,SAAAG,GAb9C,IAAkBC,EAcZP,QAAQC,IAAIK,GACZR,EAAKU,SAAS,CACZC,MAhBUF,EAgBKD,EAAI,KAflBC,EAAOG,OAAO,GAAGC,cAAgBJ,EAAOK,MAAM,IAgB/CC,IAAKP,EAAI,QAAJ,oEAKeQ,GAEpBA,EAAUjB,SACZH,KAAKC,KAAKmB,EAAUjB,0CAMtB,OADAG,QAAQC,IAAIP,MACPA,KAAKqB,MACFC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAAMxB,KAAKqB,MAAMN,MAAWO,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKC,IAAKzB,KAAKqB,MAAMF,QADxCG,EAAAC,EAAAC,cAAA,gCA3BPE,aAgClBC,mLAEK,IAAAC,EAAA5B,KACP,OACEsB,EAAAC,EAAAC,cAAA,SAAOK,MAAO7B,KAAKE,MAAMC,QAAS2B,SAAU,SAAAC,GAAG,OAAIH,EAAK1B,MAAM8B,OAAOD,aAJrDL,aAgCPO,cAtBb,SAAAA,EAAY/B,GAAO,IAAAgC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnC,KAAAiC,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAnC,KAAAmC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAvC,KAAME,KACDmB,MAAQ,CACXlB,QAAS,KAHM+B,6EAOLM,GACZ,IAAIC,EAAMD,EAAEE,OAAOb,MAAMc,QAAU,UAAW,IAC9C3C,KAAKc,SAAS,CAACX,QAASsC,qCAIxB,OACEnB,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,OAChBtB,EAAAC,EAAAC,cAACqB,EAAD,CAAW1C,QAASH,KAAKqB,MAAMlB,UAC5BmB,EAAAC,EAAAC,cAACsB,EAAD,CAAS3C,QAASH,KAAKqB,MAAMlB,QAAS6B,OAAQhC,KAAK+C,cAAcC,KAAKhD,gBAjB5D0B,aCxCEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GACjCA,EAAaC","file":"static/js/main.920e3bc3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GridLayout from 'react-grid-layout';\nimport '../node_modules/react-grid-layout/css/styles.css';\nimport '../node_modules/react-resizable/css/styles.css';\n\nfunction capFirst(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nclass MyPokemon extends Component {\n  componentDidMount() {\n    this.load(this.props.pokeNum)\n  }\n\n  load(pokeNum) {\n    let url = 'https://pokeapi.co/api/v2/pokemon/' + pokeNum + '/'\n    console.log(url);\n    fetch(url).then(\n    results => {return results.json();}).then(data => {\n      console.log(data)\n      this.setState({\n        name: capFirst(data['name']),\n        img: data['sprites']['front_default']\n      })\n    })\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // Prevent an unneeded render\n    if (nextProps.pokeNum) {\n      this.load(nextProps.pokeNum)\n    }\n  }\n\n  render() {\n    console.log(this);\n    if (!this.state) { return (<div>Loading...</div>) }\n    return (<div><div>{this.state.name}</div><div><img src={this.state.img} /></div></div>)\n  }\n}\n\nclass MyInput extends Component {\n\n  render() {\n    return (\n      <input value={this.props.pokeNum} onChange={evt => this.props.update(evt)}/>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pokeNum: '2'\n    }\n  }\n\n  updatePokeNum(e) {\n    let num = e.target.value.replace ( /[^\\d.]/g, '' );\n    this.setState({pokeNum: num})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\t    <MyPokemon pokeNum={this.state.pokeNum}/>\n        <MyInput pokeNum={this.state.pokeNum} update={this.updatePokeNum.bind(this)}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}